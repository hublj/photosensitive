//低电平触发30秒反转，应用于两个三极管ss8050光敏电路

#include "STC8G.h"  // 包含特定于STC8G系列单片机的头文件

// 定义16位和8位无符号整数类型别名
typedef unsigned int uint16_t;
typedef unsigned char uchar;

// 输出引脚（假设为P3.3，可根据实际修改）
sbit outputPin = P3^3;
// 输入引脚（假设为P5.4，可根据实际修改）
sbit inputPin = P5^4;

// 用于记录定时器计数值
uint16_t timerCount = 0;
// 当前输入引脚电平状态
uchar currentInputLevel = 0;
// 是否开始计时
bit startTimer = 0;
// 当前输入引脚实际电平
bit currentInput = 0;
// 定义30秒对应的定时器计数次数（用于防抖计时，以10毫秒为计时单位）
#define THIRTY_SECONDS_COUNT 3000

// GPIO初始化函数，配置引脚模式
void GPIO_Init() {
    P3M0 |= 0x08;  // P3.3设置为强推挽输出模式
    P3M1 &= ~0x08;

    P5M0 &= ~0x10; // P5.4设置为高阻输入模式
    P5M1 |= 0x10; 
}

// 定时器0初始化函数（实现10毫秒定时）
void Timer0_Init(void) {
    AUXR &= 0x7F;  // 使用系统时钟作为定时器源
    TMOD &= 0xF0;  // 清除原有模式设置
    TMOD |= 0x01;  // 设置为模式1：16位定时器
    TL0 = 0xE0;    // 设置定时初值
    TH0 = 0xB1;    // 设置定时初值
    TF0 = 0;       // 清除TF0标志
    TR0 = 1;       // 启动定时器0
    ET0 = 1;       // 允许定时器0中断
    EA = 1;        // 开启全局中断
}

// 定时器0中断服务函数
void Timer0_ISR() interrupt 1 {
    // 重新加载定时初值
    TL0 = 0xE0;
    TH0 = 0xB1;

    // 获取当前输入引脚电平
    currentInput = inputPin;

    if (currentInput != currentInputLevel)
    {
        // 如果输入发生变化，重置计时器并更新当前输入状态
        currentInputLevel = currentInput;
        startTimer = 1;
        timerCount = 0;
    }
    else if (startTimer == 1)
    {
        timerCount++;
        if (timerCount >= THIRTY_SECONDS_COUNT)
        {
            // 达到30秒防抖时间，进行相应输出控制逻辑
            if (currentInput == 0) // 检查是否为低电平
            {
                outputPin = 1; // 低电平激活输出
            }
            else
            {
                outputPin = 0; // 高电平停止输出
            }
            startTimer = 0;
            timerCount = 0;
        }
    }
}

// 主函数
void main()
{
    // 初始化GPIO
    GPIO_Init();
    // 初始化定时器
    Timer0_Init();

    // 初始化输出引脚为低电平
    outputPin = 0;

    // 确保初始状态下不启动计时
    startTimer = 0;
    timerCount = 0;
    currentInputLevel = inputPin; // 设置当前输入电平为初始电平

    while (1)
    {
        // 主循环可以保持为空，因为所有的工作都在中断服务程序中完成
    }
}
