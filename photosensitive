#include "STC8G.h"
#include "intrins.h"

#define uint unsigned int
#define uchar unsigned char

// 定义引脚，P3.3作为输出，P5.4作为输入
sbit outputPin = P3 ^ 3;  
sbit inputPin = P5 ^ 4;  

// 5秒对应的定时器计数次数（假设晶振频率为11.0592MHz，定时器0工作在16位模式下，每12个时钟周期为1个机器周期）
#define FIVE_SECONDS_COUNT (5 * (11059200 / 12) / 1000)  
// 用于记录定时器的计数值
uint timerCount = 0;  
// 标记当前输入引脚的持续电平状态，0表示低电平，1表示高电平
uchar currentInputLevel = 0;  
// 标记是否开始进行5秒防抖计时，0表示未开始，1表示开始
uchar startTimer = 0;  
// 声明currentInput变量，用于记录当前输入引脚的实际电平
uchar currentInput;  

// 函数声明
void Timer_Init();
void GPIO_Init();

// 定时器初始化函数
void Timer_Init() {
    TMOD &= 0xF0;
    TMOD |= 0x01;  // 设置定时器0为模式1，16位定时器
    TH0 = (65536 - FIVE_SECONDS_COUNT) / 256;  // 计算并设置定时器初值高8位
    TL0 = (65536 - FIVE_SECONDS_COUNT) % 256;  // 计算并设置定时器初值低8位
    ET0 = 1;       // 允许定时器0中断
    EA = 1;        // 开总中断
    TR0 = 1;       // 启动定时器0
}

// GPIO初始化函数，配置引脚模式
void GPIO_Init() {
    P3M0 |= 0x08;  // P3.3设置为强推挽输出模式，对应二进制第3位设置为1（00001000）
    P3M1 &= ~0x08;

    P5M0 &= ~0x10;  // P5.4设置为标准双向口模式，对应二进制第4位设置为0（11110111）
    P5M1 &= ~0x10;
}

// 定时器中断服务函数
void Timer_ISR() interrupt 1 {
    TH0 = (65536 - FIVE_SECONDS_COUNT) / 256;
    TL0 = (65536 - FIVE_SECONDS_COUNT) % 256;
    currentInput = inputPin;  // 获取当前输入引脚的实际电平
    if (currentInput == currentInputLevel) {  // 当前输入电平与持续电平状态一致
        if (startTimer == 0) {
            startTimer = 1;
            timerCount = 0;
        }
        if (timerCount < FIVE_SECONDS_COUNT) {
            timerCount++;
        } else {
            timerCount = 0;
            outputPin = currentInputLevel;  // 5秒防抖时间到，输出对应电平
            startTimer = 0;
        }
    } else {  // 当前输入电平与持续电平状态不一致，重新计时
        currentInputLevel = currentInput;
        startTimer = 0;
        timerCount = 0;
    }
}

void main() {
    Timer_Init();
    GPIO_Init();
    outputPin = 0;  // 初始输出低电平，可根据实际情况调整
    while (1) {
        // 这里可以添加其他的主循环内操作，比如一些系统状态监测等
    }
}
